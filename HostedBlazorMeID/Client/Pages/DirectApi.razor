@page "/directapi"
@using HostedBlazorMeID.Shared
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IAntiforgeryHttpClientFactory httpClientFactory
@inject IJSRuntime JSRuntime

<h3>Quick Grid display using data  Direct API</h3>

@if (myGridData == null)
{
    <p><em>Loading...</em></p>
}
else
{
<hr />

<QuickGrid Items="@FilteredItems" Pagination="@pagination">

    <PropertyColumn Property="@(p => p.Id)" Sortable="true" />

    <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="name">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="name..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <PropertyColumn Property="@(p => p.Colour)" Sortable="true" />
</QuickGrid>

<Paginator State="@pagination" />
}

@code {

    private IEnumerable<MyGridData>? myApiData;
    private IQueryable<MyGridData> myGridData = new List<MyGridData>().AsQueryable();
    private PaginationState pagination = new PaginationState { ItemsPerPage = 8 };
    private string nameFilter = string.Empty;

    GridSort<MyGridData> rankSort = GridSort<MyGridData>
        .ByDescending(x => x.Name)
        .ThenDescending(x => x.Colour)
        .ThenDescending(x => x.Id);

    IQueryable<MyGridData>? FilteredItems => myGridData.Where(x => x.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        var client = await httpClientFactory.CreateClientAsync();

        var myApiData = await client.GetFromJsonAsync<MyGridData[]>("api/DirectApi");

        if (myApiData != null) myGridData = myApiData.AsQueryable();
    }
}
